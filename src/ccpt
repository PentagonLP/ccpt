--[[ 
	ComputerCraft Package Tool
	Author: PentagonLP
	Version: 1.0
]]

-- Load properprint library
local properprint = require("lib.properprint")

-- Load file manipulation library
local files = require("lib.ccpt.files")

-- Load AutoComplete Helper
local ccptAutoComplete = require("lib.ccpt.autocomplete")

-- Load Helper Functions
local ccpthelper = require("lib.ccpt.helper")

-- Load Data Tables
local data = require("lib.ccpt.data")

local state = {}
-- Read arguments
state.args = {...}

-- Counters to print out at the very end
state.installed = 0
state.updated = 0
state.removed = 0

-- MAIN PROGRAM --
-- Register autocomplete function
shell.setCompletionFunction("ccpt", ccptAutoComplete)

-- Add to startup file to run at startup
local startup = files.readFile("startup","") or ""
if not ccpthelper.startsWith(startup,"-- ccpt: Seach for updates\nshell.run(\"ccpt\",\"startup\")") then
	startup = "-- ccpt: Seach for updates\nshell.run(\"ccpt\",\"startup\")\n\n" .. startup
	files.storeFile("startup",startup)
	print("[Installer] Startup entry created!")
end

-- Call required function
if #state.args==0 then
	properprint.pprint("Incomplete command, missing: 'Action'; Type 'ccpt help' for syntax.")
else if data.actions[state.args[1]]==nil then
		properprint.pprint("Action '" .. state.args[1] .. "' is unknown. Type 'ccpt help' for syntax.")
	else
		data.actions[state.args[1]]["func"](state)
	end
end

-- List stats of recent operation
if not (state.installed+state.updated+state.removed==0) then
	local actionmessage = ""
	if state.installed==1 then
		actionmessage =	"1 package installed, "
	else
		actionmessage = state.installed .. " packages installed, "
	end
	if state.updated==1 then
		actionmessage =	actionmessage .. "1 package updated, "
	else
		actionmessage = actionmessage .. state.updated .. " packages updated, "
	end
	if state.removed==1 then
		actionmessage =	actionmessage .. "1 package removed."
	else
		actionmessage = actionmessage .. state.removed .. " packages removed."
	end
	properprint.pprint(actionmessage)
end